//! Governance Pallet - Auto Generated by Blitzy

#![cfg_attr(not(feature = "std"), no_std)]

use frame_support::{decl_module, decl_storage, decl_event, decl_error, dispatch};
use frame_system::ensure_signed;

pub trait Config: frame_system::Config {
    type Event: From<Event<Self>> + Into<<Self as frame_system::Config>::Event>;
}

decl_storage! {
    trait Store for Module<T: Config> as GovernanceModule {
        ProposalCount get(fn proposal_count): u32;
    }
}

decl_event! {
    pub enum Event<T> {
        ProposalSubmitted(u32),
        VoteCast(u32),
    }
}

decl_module! {
    pub struct Module<T: Config> for enum Call where origin: T::Origin {
        fn deposit_event() = default;

        #[weight = 10_000]
        fn submit_proposal(origin) {
            let _sender = ensure_signed(origin)?;
            let id = <ProposalCount>::get() + 1;
            <ProposalCount>::put(id);
            Self::deposit_event(RawEvent::ProposalSubmitted(id));
        }
    }
}
