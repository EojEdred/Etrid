name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets -- -D warnings

  test-rust:
    name: Test Rust Components
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Add Wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all --verbose

      - name: Run tests (release mode)
        run: cargo test --all --release --verbose

  test-sdk:
    name: Test JavaScript SDK
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 13-clients/sdk/js-etrid-sdk/package-lock.json

      - name: Install dependencies
        working-directory: 13-clients/sdk/js-etrid-sdk
        run: npm ci

      - name: Run tests
        working-directory: 13-clients/sdk/js-etrid-sdk
        run: npm test

      - name: Build SDK
        working-directory: 13-clients/sdk/js-etrid-sdk
        run: npm run build

  test-frontend:
    name: Test Frontend Applications
    runs-on: ubuntu-latest
    needs: check
    strategy:
      matrix:
        app:
          - apps/wallet-web/etrid-crypto-website
          - apps/validator-dashboard
          - apps/watchtower-monitor
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.app }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.app }}
        run: npm ci || npm install

      - name: Run tests
        working-directory: ${{ matrix.app }}
        run: npm test || echo "No tests found"

      - name: Build app
        working-directory: ${{ matrix.app }}
        run: npm run build

  build:
    name: Build All Components
    runs-on: ubuntu-latest
    needs: [test-rust, test-sdk, test-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Add Wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Build with script
        run: |
          chmod +x scripts/build-all.sh
          ./scripts/build-all.sh --release

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: etrid-binaries
          path: |
            target/release/etrid
            target/wasm32-unknown-unknown/release/*.wasm
          retention-days: 7

  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install TypeDoc
        run: npm install -g typedoc

      - name: Generate documentation
        run: |
          chmod +x scripts/generate-docs.sh
          ./scripts/generate-docs.sh

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/generated
          cname: docs.etrid.io

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test-rust
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage
        run: cargo tarpaulin --out Xml --all-features --workspace

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          files: ./cobertura.xml
          fail_ci_if_error: false

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.etrid.io
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Deploy to Vercel (Staging)
        run: |
          npm install -g vercel
          chmod +x scripts/deploy-all.sh
          ./scripts/deploy-all.sh --environment staging --skip-tests
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://etrid.io
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Deploy to Vercel (Production)
        run: |
          npm install -g vercel
          chmod +x scripts/deploy-all.sh
          ./scripts/deploy-all.sh --environment production --skip-tests
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docs]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: etrid-binaries
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
