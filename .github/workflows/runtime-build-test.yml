name: Runtime Build & Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - '05-multichain/flare-chain/**'
      - 'pallets/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '05-multichain/flare-chain/**'
      - 'pallets/**'
      - 'Cargo.toml'
      - 'Cargo.lock'

env:
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always

jobs:
  check-formatting:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
          override: true

      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-clippy-${{ hashFiles('**/Cargo.lock') }}

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  build-runtime:
    name: Build Runtime
    runs-on: ubuntu-latest
    needs: [check-formatting, clippy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true

      - name: Install wasm-gc
        run: cargo install wasm-gc

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Build runtime
        run: cargo build --release --locked

      - name: Check binary exists
        run: |
          if [ -f target/release/etrid ]; then
            echo "✓ Binary built successfully"
            ls -lh target/release/etrid
          else
            echo "✗ Binary not found"
            exit 1
          fi

      - name: Check WASM runtime
        run: |
          WASM_RUNTIME=$(find target/release/wbuild -name "*.compact.compressed.wasm" | head -1)
          if [ -f "$WASM_RUNTIME" ]; then
            echo "✓ WASM runtime found: $WASM_RUNTIME"
            ls -lh $WASM_RUNTIME
          else
            echo "⚠ WASM runtime not found"
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: etrid-binary
          path: target/release/etrid
          retention-days: 7

      - name: Upload WASM runtime artifact
        uses: actions/upload-artifact@v3
        with:
          name: wasm-runtime
          path: target/release/wbuild/**/flarechain_runtime.compact.compressed.wasm
          retention-days: 7

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [check-formatting, clippy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --workspace --release --locked -- --nocapture

      - name: Generate test report
        if: always()
        run: |
          echo "# Test Results" > test-report.md
          echo "" >> test-report.md
          cargo test --workspace --release --locked 2>&1 | tee test-output.txt
          echo "\`\`\`" >> test-report.md
          tail -100 test-output.txt >> test-report.md
          echo "\`\`\`" >> test-report.md

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test-report.md

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit --deny warnings || true

  benchmark-build:
    name: Benchmark Build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [build-runtime]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

      - name: Build benchmarks
        run: cargo build --release --features runtime-benchmarks

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-runtime]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download binary artifact
        uses: actions/download-artifact@v3
        with:
          name: etrid-binary
          path: target/release/

      - name: Make binary executable
        run: chmod +x target/release/etrid

      - name: Start local node
        run: |
          ./target/release/etrid --dev --tmp &
          NODE_PID=$!
          echo "NODE_PID=$NODE_PID" >> $GITHUB_ENV
          sleep 30

      - name: Check node is running
        run: |
          curl -H "Content-Type: application/json" \
            -d '{"id":1, "jsonrpc":"2.0", "method": "system_health"}' \
            http://localhost:9933 || exit 1

      - name: Stop node
        if: always()
        run: kill $NODE_PID || true

  check-genesis:
    name: Validate Genesis Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Validate mainnet genesis
        run: |
          GENESIS_FILE="05-multichain/flare-chain/runtime/presets/flarechain_mainnet_with_vesting.json"
          if [ -f "$GENESIS_FILE" ]; then
            echo "Validating $GENESIS_FILE"
            jq empty "$GENESIS_FILE" || exit 1
            echo "✓ Valid JSON"

            # Check for placeholder addresses (fail on main branch)
            if [ "${{ github.ref }}" == "refs/heads/main" ]; then
              if grep -q "PLACEHOLDER\|ADDRESS_HERE\|REPLACE_ME" "$GENESIS_FILE"; then
                echo "✗ Found placeholder addresses in mainnet genesis!"
                exit 1
              fi
            fi
          else
            echo "⚠ Genesis file not found: $GENESIS_FILE"
          fi

      - name: Validate testnet genesis
        run: |
          GENESIS_FILE="05-multichain/flare-chain/runtime/presets/flarechain_testnet.json"
          if [ -f "$GENESIS_FILE" ]; then
            echo "Validating $GENESIS_FILE"
            jq empty "$GENESIS_FILE" || exit 1
            echo "✓ Valid JSON"
          else
            echo "⚠ Genesis file not found: $GENESIS_FILE"
          fi

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -t etrid:test .

      - name: Test Docker image
        run: docker run --rm etrid:test --version

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [build-runtime, unit-tests, integration-tests, security-audit, check-genesis]
    if: success()
    steps:
      - name: Success notification
        run: |
          echo "✅ All checks passed!"
          echo "Runtime build: ✓"
          echo "Unit tests: ✓"
          echo "Integration tests: ✓"
          echo "Security audit: ✓"
          echo "Genesis validation: ✓"

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [build-runtime, unit-tests, integration-tests, security-audit, check-genesis]
    if: failure()
    steps:
      - name: Failure notification
        run: |
          echo "❌ Some checks failed!"
          echo "Please review the failed jobs above"
