# Recording Rules for EDSC Bridge
# Pre-compute expensive queries for dashboards

groups:
  - name: bridge_aggregations
    interval: 30s
    rules:
      # Total messages processed across all attesters
      - record: bridge:messages_total:sum
        expr: sum(attestation_messages_seen_total)

      # Messages by direction
      - record: bridge:messages_ethereum_to_etrid:sum
        expr: sum(attestation_messages_seen_total{source_domain="0"})

      - record: bridge:messages_etrid_to_ethereum:sum
        expr: sum(attestation_messages_seen_total{source_domain="2"})

      # Messages relayed successfully
      - record: bridge:messages_relayed_success:sum
        expr: sum(relayer_messages_relayed_total)

      # Average relay time (5min window)
      - record: bridge:relay_duration_seconds:avg
        expr: avg(rate(relayer_relay_duration_seconds_sum[5m]) / rate(relayer_relay_duration_seconds_count[5m]))

      # Success rate
      - record: bridge:relay_success_rate
        expr: sum(rate(relayer_messages_relayed_total[5m])) / sum(rate(relayer_relay_attempts_total[5m]))

      # Active attesters
      - record: bridge:attesters_active:count
        expr: count(up{job="attestation-service"} == 1)

      # Active relayers
      - record: bridge:relayers_active:count
        expr: count(up{job="relayer-service"} == 1)

  - name: performance_metrics
    interval: 1m
    rules:
      # P95 relay latency per destination
      - record: bridge:relay_duration_seconds:p95
        expr: histogram_quantile(0.95, sum(rate(relayer_relay_duration_seconds_bucket[5m])) by (le, destination))

      # P99 relay latency per destination
      - record: bridge:relay_duration_seconds:p99
        expr: histogram_quantile(0.99, sum(rate(relayer_relay_duration_seconds_bucket[5m])) by (le, destination))

      # API response time P95
      - record: attestation:api_duration_seconds:p95
        expr: histogram_quantile(0.95, sum(rate(attestation_api_request_duration_seconds_bucket[5m])) by (le, instance))

      # Throughput (messages per minute)
      - record: bridge:throughput_per_minute
        expr: sum(rate(attestation_messages_seen_total[1m])) * 60

  - name: balance_tracking
    interval: 1m
    rules:
      # Total ETH across all relayers
      - record: bridge:relayer_eth_total
        expr: sum(relayer_balance_eth)

      # Total EDSC across all relayers
      - record: bridge:relayer_edsc_total
        expr: sum(relayer_balance_edsc)

      # Minimum ETH balance (most critical)
      - record: bridge:relayer_eth_min
        expr: min(relayer_balance_eth)

  - name: error_tracking
    interval: 1m
    rules:
      # Total relay failures
      - record: bridge:relay_failures:rate
        expr: sum(rate(relayer_relay_failures_total[5m]))

      # Relay failures by reason
      - record: bridge:relay_failures_by_reason:rate
        expr: sum(rate(relayer_relay_failures_total[5m])) by (reason)

      # API error rate
      - record: attestation:api_errors:rate
        expr: sum(rate(attestation_api_requests_total{status=~"5.."}[5m]))

      # Signature failures
      - record: attestation:signature_failures:rate
        expr: sum(rate(attestation_signature_verification_failures_total[5m]))

  - name: chain_metrics
    interval: 30s
    rules:
      # Ethereum block height (max across attesters)
      - record: chain:ethereum_block_height:max
        expr: max(attestation_ethereum_block_height)

      # Substrate block height (max)
      - record: chain:substrate_block_height:max
        expr: max(attestation_substrate_block_height)

      # Block production rate (Substrate)
      - record: chain:substrate_blocks_per_second
        expr: rate(substrate_block_height[1m])

  - name: sla_metrics
    interval: 5m
    rules:
      # Uptime percentage (last 24h)
      - record: bridge:uptime_percentage_24h
        expr: avg_over_time(up{job="attestation-service"}[24h]) * 100

      # Messages relayed within SLA (<5 min) percentage
      - record: bridge:relay_sla_compliance
        expr: sum(rate(relayer_relay_duration_seconds_bucket{le="300"}[1h])) / sum(rate(relayer_relay_duration_seconds_count[1h]))
