---
# Validator Deployment Playbook
# Deploys Ëtrid validator nodes for testnet or mainnet
# Usage: ansible-playbook -i environments/{testnet|mainnet}/inventory/hosts.yml playbooks/02-deploy-validator.yml

- name: Deploy Ëtrid Validator Nodes
  hosts: validators,backup_validators,rpc_nodes
  become: yes
  gather_facts: yes

  vars:
    etrid_user: "etrid"
    etrid_group: "etrid"
    substrate_binary_path: "/opt/etrid/etrid"
    chain_spec_path: "/opt/etrid/{{ chain_name }}-chainspec.json"
    base_path: "/var/lib/etrid"
    log_path: "/var/log/etrid"

  pre_tasks:
    - name: Display deployment information
      debug:
        msg:
          - "================================================"
          - "Ëtrid Validator Deployment"
          - "Environment: {{ environment }}"
          - "Network: {{ network_name }}"
          - "Node: {{ validator_name | default(rpc_name) }}"
          - "Type: {% if 'validators' in group_names %}Validator{% elif 'backup_validators' in group_names %}Backup Validator{% else %}RPC Node{% endif %}"
          - "================================================"
      tags: [always]

    - name: Check if binary exists locally
      stat:
        path: "{{ substrate_binary_path }}"
      register: binary_exists
      tags: [binary]

  tasks:
    # ============================================
    # Binary Deployment
    # ============================================
    - name: Check for binary in files directory
      local_action:
        module: stat
        path: "{{ playbook_dir }}/../files/etrid"
      register: local_binary
      tags: [binary]

    - name: Upload Substrate binary
      copy:
        src: "{{ playbook_dir }}/../files/etrid"
        dest: "{{ substrate_binary_path }}"
        owner: "{{ etrid_user }}"
        group: "{{ etrid_group }}"
        mode: '0755'
      when: local_binary.stat.exists
      tags: [binary]

    - name: Fail if binary not found
      fail:
        msg: |
          Substrate binary not found!

          Please build and place the binary at:
          {{ playbook_dir }}/../files/etrid

          To build:
          cd /Users/macbook/Desktop/etrid
          cargo build --release --locked
          cp target/release/etrid infrastructure/ansible/files/

      when: not local_binary.stat.exists and not binary_exists.stat.exists
      tags: [binary]

    - name: Verify binary version
      shell: "{{ substrate_binary_path }} --version"
      register: binary_version
      changed_when: false
      tags: [binary]

    - name: Display binary version
      debug:
        msg: "Ëtrid version: {{ binary_version.stdout }}"
      tags: [binary]

    # ============================================
    # Chain Specification
    # ============================================
    - name: Check for chain spec in files directory
      local_action:
        module: stat
        path: "{{ playbook_dir }}/../files/{{ chain_name }}-chainspec.json"
      register: local_chainspec
      tags: [chainspec]

    - name: Upload chain specification
      copy:
        src: "{{ playbook_dir }}/../files/{{ chain_name }}-chainspec.json"
        dest: "{{ chain_spec_path }}"
        owner: "{{ etrid_user }}"
        group: "{{ etrid_group }}"
        mode: '0644'
      when: local_chainspec.stat.exists
      tags: [chainspec]

    - name: Generate default chain spec if not provided
      shell: |
        {{ substrate_binary_path }} build-spec --chain staging --disable-default-bootnode > {{ chain_spec_path }}
      become_user: "{{ etrid_user }}"
      when: not local_chainspec.stat.exists
      tags: [chainspec]

    # ============================================
    # Node Keys (for validators)
    # ============================================
    - name: Check if node key exists
      stat:
        path: "{{ base_path }}/node-key"
      register: node_key_exists
      when: "'validators' in group_names or 'backup_validators' in group_names"
      tags: [keys]

    - name: Generate node key
      shell: |
        {{ substrate_binary_path }} key generate-node-key --file {{ base_path }}/node-key
      become_user: "{{ etrid_user }}"
      when: |
        ('validators' in group_names or 'backup_validators' in group_names)
        and not node_key_exists.stat.exists
      tags: [keys]

    - name: Set node key permissions
      file:
        path: "{{ base_path }}/node-key"
        owner: "{{ etrid_user }}"
        group: "{{ etrid_group }}"
        mode: '0600'
      when: "'validators' in group_names or 'backup_validators' in group_names"
      tags: [keys]

    - name: Generate session keys (first time only)
      shell: |
        {{ substrate_binary_path }} key generate \
          --scheme Sr25519 \
          --output-type Json > {{ base_path }}/session-keys-{{ inventory_hostname }}.json
      become_user: "{{ etrid_user }}"
      args:
        creates: "{{ base_path }}/session-keys-{{ inventory_hostname }}.json"
      when: "'validators' in group_names or 'backup_validators' in group_names"
      register: session_keys_gen
      tags: [keys]

    - name: Secure session keys file
      file:
        path: "{{ base_path }}/session-keys-{{ inventory_hostname }}.json"
        owner: "{{ etrid_user }}"
        group: "{{ etrid_group }}"
        mode: '0400'
      when: "'validators' in group_names or 'backup_validators' in group_names"
      tags: [keys]

    - name: Read session keys
      shell: cat {{ base_path }}/session-keys-{{ inventory_hostname }}.json
      register: session_keys_output
      when: |
        ('validators' in group_names or 'backup_validators' in group_names)
        and session_keys_gen.changed
      tags: [keys]

    - name: Display session keys (SAVE THESE SECURELY!)
      debug:
        msg:
          - "================================================"
          - "🔑 SESSION KEYS FOR: {{ inventory_hostname }}"
          - "VALIDATOR: {{ validator_name }}"
          - "================================================"
          - "{{ session_keys_output.stdout }}"
          - "================================================"
          - "⚠️  CRITICAL: Save these keys securely!"
          - "⚠️  Store in password manager (1Password, Vault)"
          - "⚠️  You will need these for validator staking"
          - "================================================"
      when: |
        ('validators' in group_names or 'backup_validators' in group_names)
        and session_keys_gen.changed
      tags: [keys]

    - name: Backup session keys locally
      fetch:
        src: "{{ base_path }}/session-keys-{{ inventory_hostname }}.json"
        dest: "{{ playbook_dir }}/../backups/keys/{{ environment }}/{{ inventory_hostname }}-session-keys.json"
        flat: yes
      when: "'validators' in group_names or 'backup_validators' in group_names"
      tags: [keys, backup]

    # ============================================
    # Systemd Service
    # ============================================
    - name: Deploy systemd service file
      template:
        src: "{{ playbook_dir }}/../templates/etrid-validator.service.j2"
        dest: /etc/systemd/system/etrid.service
        owner: root
        group: root
        mode: '0644'
      notify: restart etrid
      tags: [service]

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      tags: [service]

    - name: Enable etrid service
      systemd:
        name: etrid
        enabled: yes
      tags: [service]

    - name: Start etrid service
      systemd:
        name: etrid
        state: started
      tags: [service]

    # ============================================
    # Health Check
    # ============================================
    - name: Wait for node to start
      wait_for:
        port: "{{ p2p_port }}"
        timeout: 60
      tags: [health]

    - name: Create health check script
      copy:
        dest: /opt/etrid/health-check.sh
        owner: "{{ etrid_user }}"
        group: "{{ etrid_group }}"
        mode: '0755'
        content: |
          #!/bin/bash
          # Ëtrid Node Health Check

          set -e

          RPC_URL="http://localhost:{{ rpc_port }}"

          # Check if service is running
          if ! systemctl is-active --quiet etrid; then
            echo "ERROR: etrid service is not running"
            exit 1
          fi

          # Check if RPC is responding
          if ! curl -s -f -m 5 "$RPC_URL" > /dev/null 2>&1; then
            echo "WARNING: RPC endpoint not responding yet (node may be starting)"
            exit 0
          fi

          # Get system health
          HEALTH=$(curl -s -H "Content-Type: application/json" \
                       -d '{"id":1, "jsonrpc":"2.0", "method": "system_health"}' \
                       "$RPC_URL" | jq -r '.result')

          PEERS=$(echo "$HEALTH" | jq -r '.peers')
          IS_SYNCING=$(echo "$HEALTH" | jq -r '.isSyncing')

          echo "Node Health:"
          echo "  Peers: $PEERS"
          echo "  Syncing: $IS_SYNCING"

          # Get block height
          BLOCK=$(curl -s -H "Content-Type: application/json" \
                      -d '{"id":1, "jsonrpc":"2.0", "method": "chain_getHeader"}' \
                      "$RPC_URL" | jq -r '.result.number')

          echo "  Block: $BLOCK"

          exit 0
      tags: [health]

    - name: Run initial health check
      shell: /opt/etrid/health-check.sh
      register: health_check
      retries: 3
      delay: 10
      until: health_check.rc == 0
      ignore_errors: yes
      tags: [health]

    - name: Display health check results
      debug:
        var: health_check.stdout_lines
      when: health_check.rc == 0
      tags: [health]

    # ============================================
    # Backup Script
    # ============================================
    - name: Create backup script
      copy:
        dest: /opt/etrid/backup-validator.sh
        owner: "{{ etrid_user }}"
        group: "{{ etrid_group }}"
        mode: '0755'
        content: |
          #!/bin/bash
          # Ëtrid Validator Backup Script

          BACKUP_DIR="/var/backups/etrid"
          DATE=$(date +%Y%m%d_%H%M%S)

          mkdir -p "$BACKUP_DIR"

          echo "Starting backup at $DATE..."

          # Backup session keys
          if [ -f {{ base_path }}/session-keys-{{ inventory_hostname }}.json ]; then
            cp {{ base_path }}/session-keys-{{ inventory_hostname }}.json \
               "$BACKUP_DIR/session-keys_$DATE.json"
          fi

          # Backup node key
          if [ -f {{ base_path }}/node-key ]; then
            cp {{ base_path }}/node-key \
               "$BACKUP_DIR/node-key_$DATE"
          fi

          # Backup chain spec
          cp {{ chain_spec_path }} "$BACKUP_DIR/chainspec_$DATE.json"

          # Create compressed backup
          tar -czf "$BACKUP_DIR/validator-backup_$DATE.tar.gz" \
              -C "$BACKUP_DIR" \
              session-keys_$DATE.json \
              node-key_$DATE \
              chainspec_$DATE.json 2>/dev/null || true

          # Cleanup individual files
          rm -f "$BACKUP_DIR/session-keys_$DATE.json" \
                "$BACKUP_DIR/node-key_$DATE" \
                "$BACKUP_DIR/chainspec_$DATE.json"

          # Keep only last 7 days
          find "$BACKUP_DIR" -name "validator-backup_*.tar.gz" -mtime +7 -delete

          echo "Backup completed: $BACKUP_DIR/validator-backup_$DATE.tar.gz"
      when: "'validators' in group_names or 'backup_validators' in group_names"
      tags: [backup]

    - name: Schedule daily backups
      cron:
        name: "Ëtrid validator backup"
        minute: "0"
        hour: "2"
        job: "/opt/etrid/backup-validator.sh >> /var/log/etrid/backup.log 2>&1"
        user: "{{ etrid_user }}"
      when: "'validators' in group_names or 'backup_validators' in group_names"
      tags: [backup]

    # ============================================
    # Completion Message
    # ============================================
    - name: Display completion message
      debug:
        msg:
          - "================================================"
          - "✅ Validator deployment completed!"
          - "Environment: {{ environment }}"
          - "Node: {{ validator_name | default(rpc_name) }}"
          - ""
          - "Service status: systemctl status etrid"
          - "View logs: journalctl -u etrid -f"
          - "Health check: /opt/etrid/health-check.sh"
          - ""
          - "{% if 'validators' in group_names or 'backup_validators' in group_names %}Session keys saved to: {{ playbook_dir }}/../backups/keys/{{ environment }}/{% endif %}"
          - "================================================"
      tags: [always]

  handlers:
    - name: restart etrid
      systemd:
        name: etrid
        state: restarted
