---
# Monitoring Infrastructure Deployment
# Sets up Prometheus, Grafana, and AlertManager
# Usage: ansible-playbook -i environments/{testnet|mainnet}/inventory/hosts.yml playbooks/03-setup-monitoring.yml

- name: Deploy Monitoring Infrastructure
  hosts: monitoring
  become: yes
  gather_facts: yes

  vars:
    prometheus_version: "2.47.0"
    grafana_version: "10.1.5"
    alertmanager_version: "0.26.0"

    prometheus_config_dir: "/etc/prometheus"
    prometheus_data_dir: "/var/lib/prometheus"
    grafana_data_dir: "/var/lib/grafana"
    alertmanager_config_dir: "/etc/alertmanager"
    alertmanager_data_dir: "/var/lib/alertmanager"

    # Alert notification (UPDATE THESE)
    slack_webhook_url: "https://hooks.slack.com/services/YOUR/WEBHOOK/URL"
    alert_email: "alerts@etrid.network"

  pre_tasks:
    - name: Display deployment information
      debug:
        msg:
          - "================================================"
          - "Monitoring Infrastructure Deployment"
          - "Environment: {{ environment }}"
          - "Network: {{ network_name }}"
          - "================================================"
      tags: [always]

  tasks:
    # ============================================
    # Prometheus Setup
    # ============================================
    - name: Create Prometheus user
      user:
        name: prometheus
        system: yes
        shell: /bin/false
        create_home: no
      tags: [monitoring, prometheus]

    - name: Create Prometheus directories
      file:
        path: "{{ item }}"
        state: directory
        owner: prometheus
        group: prometheus
        mode: '0755'
      loop:
        - "{{ prometheus_config_dir }}"
        - "{{ prometheus_data_dir }}"
        - "{{ prometheus_config_dir }}/rules"
      tags: [monitoring, prometheus]

    - name: Download Prometheus
      get_url:
        url: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz"
        dest: "/tmp/prometheus-{{ prometheus_version }}.tar.gz"
      tags: [monitoring, prometheus]

    - name: Extract Prometheus
      unarchive:
        src: "/tmp/prometheus-{{ prometheus_version }}.tar.gz"
        dest: /tmp
        remote_src: yes
      tags: [monitoring, prometheus]

    - name: Install Prometheus binaries
      copy:
        src: "/tmp/prometheus-{{ prometheus_version }}.linux-amd64/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        mode: '0755'
        remote_src: yes
      loop:
        - prometheus
        - promtool
      tags: [monitoring, prometheus]

    - name: Create Prometheus configuration
      template:
        src: "{{ playbook_dir }}/../templates/prometheus.yml.j2"
        dest: "{{ prometheus_config_dir }}/prometheus.yml"
        owner: prometheus
        group: prometheus
        mode: '0644'
      notify: restart prometheus
      tags: [monitoring, prometheus, config]

    - name: Create Prometheus alerting rules
      copy:
        dest: "{{ prometheus_config_dir }}/rules/alerts.yml"
        owner: prometheus
        group: prometheus
        mode: '0644'
        content: |
          groups:
            - name: validator_alerts
              interval: 30s
              rules:
                - alert: ValidatorDown
                  expr: up{job="validators"} == 0
                  for: 2m
                  labels:
                    severity: critical
                  annotations:
                    summary: "Validator {{ $labels.instance }} is down"
                    description: "Validator has been down for more than 2 minutes"

                - alert: LowPeerCount
                  expr: substrate_sub_libp2p_peers_count < 3
                  for: 5m
                  labels:
                    severity: warning
                  annotations:
                    summary: "Low peer count on {{ $labels.instance }}"
                    description: "Peer count is {{ $value }}"

                - alert: BlockProductionStopped
                  expr: rate(substrate_block_height{status="best"}[5m]) == 0
                  for: 3m
                  labels:
                    severity: critical
                  annotations:
                    summary: "Block production stopped on {{ $labels.instance }}"
                    description: "No new blocks in 3 minutes"

                - alert: HighCPUUsage
                  expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 90
                  for: 10m
                  labels:
                    severity: warning
                  annotations:
                    summary: "High CPU usage on {{ $labels.instance }}"
                    description: "CPU usage is {{ $value }}%"

                - alert: HighMemoryUsage
                  expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 90
                  for: 5m
                  labels:
                    severity: warning
                  annotations:
                    summary: "High memory usage on {{ $labels.instance }}"
                    description: "Memory usage is {{ $value }}%"

                - alert: LowDiskSpace
                  expr: (node_filesystem_avail_bytes{mountpoint="/"} / node_filesystem_size_bytes{mountpoint="/"}) * 100 < 20
                  for: 5m
                  labels:
                    severity: warning
                  annotations:
                    summary: "Low disk space on {{ $labels.instance }}"
                    description: "Only {{ $value }}% disk space remaining"
      notify: restart prometheus
      tags: [monitoring, prometheus, alerts]

    - name: Create Prometheus systemd service
      copy:
        dest: /etc/systemd/system/prometheus.service
        content: |
          [Unit]
          Description=Prometheus Monitoring System
          After=network-online.target

          [Service]
          Type=simple
          User=prometheus
          Group=prometheus
          ExecStart=/usr/local/bin/prometheus \
            --config.file={{ prometheus_config_dir }}/prometheus.yml \
            --storage.tsdb.path={{ prometheus_data_dir }} \
            --storage.tsdb.retention.time=30d \
            --web.listen-address=0.0.0.0:{{ prometheus_port }}
          Restart=always

          [Install]
          WantedBy=multi-user.target
      notify: restart prometheus
      tags: [monitoring, prometheus]

    - name: Enable and start Prometheus
      systemd:
        name: prometheus
        enabled: yes
        state: started
        daemon_reload: yes
      tags: [monitoring, prometheus]

    # ============================================
    # Grafana Setup
    # ============================================
    - name: Add Grafana APT key
      apt_key:
        url: https://apt.grafana.com/gpg.key
        state: present
      tags: [monitoring, grafana]

    - name: Add Grafana repository
      apt_repository:
        repo: deb https://apt.grafana.com stable main
        state: present
      tags: [monitoring, grafana]

    - name: Install Grafana
      apt:
        name: grafana
        state: present
        update_cache: yes
      tags: [monitoring, grafana]

    - name: Configure Grafana
      copy:
        dest: /etc/grafana/grafana.ini
        content: |
          [server]
          protocol = http
          http_addr = 0.0.0.0
          http_port = {{ grafana_port }}
          domain = monitoring.{{ network_name }}.etrid.network
          root_url = http://monitoring.{{ network_name }}.etrid.network

          [security]
          admin_user = admin
          admin_password = CHANGE_ME_IMMEDIATELY_{{ environment | upper }}

          [users]
          allow_sign_up = false

          [auth.anonymous]
          enabled = false

          [dashboards]
          default_home_dashboard_path = /var/lib/grafana/dashboards/substrate-overview.json
      notify: restart grafana
      tags: [monitoring, grafana, config]

    - name: Create Grafana datasource configuration
      copy:
        dest: /etc/grafana/provisioning/datasources/prometheus.yml
        content: |
          apiVersion: 1
          datasources:
            - name: Prometheus
              type: prometheus
              access: proxy
              url: http://localhost:{{ prometheus_port }}
              isDefault: true
              editable: false
      notify: restart grafana
      tags: [monitoring, grafana, config]

    - name: Enable and start Grafana
      systemd:
        name: grafana-server
        enabled: yes
        state: started
      tags: [monitoring, grafana]

    # ============================================
    # Firewall Configuration
    # ============================================
    - name: Open firewall for Prometheus
      ufw:
        rule: allow
        port: "{{ prometheus_port }}"
        proto: tcp
      tags: [monitoring, firewall]

    - name: Open firewall for Grafana
      ufw:
        rule: allow
        port: "{{ grafana_port }}"
        proto: tcp
      tags: [monitoring, firewall]

    # ============================================
    # Completion Message
    # ============================================
    - name: Display monitoring URLs
      debug:
        msg:
          - "================================================"
          - "✅ Monitoring Infrastructure Deployed!"
          - "================================================"
          - "Prometheus: http://{{ ansible_host }}:{{ prometheus_port }}"
          - "Grafana: http://{{ ansible_host }}:{{ grafana_port }}"
          - "  Default login: admin / CHANGE_ME_IMMEDIATELY_{{ environment | upper }}"
          - ""
          - "⚠️  IMPORTANT: Change Grafana admin password immediately!"
          - ""
          - "Next Steps:"
          - "1. Login to Grafana"
          - "2. Change admin password"
          - "3. Import Substrate dashboards:"
          - "   - Substrate Node: ID 13759"
          - "   - Node Exporter: ID 1860"
          - "================================================"
      tags: [monitoring, info]

  handlers:
    - name: restart prometheus
      systemd:
        name: prometheus
        state: restarted

    - name: restart grafana
      systemd:
        name: grafana-server
        state: restarted
