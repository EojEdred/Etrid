#!/bin/bash

# EDSC Bridge Local Testnet Setup Script
# This script starts all necessary services for testing

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"
echo "โ     EDSC Bridge Local Testnet Setup                     โ"
echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if a port is in use
port_in_use() {
    lsof -Pi :$1 -sTCP:LISTEN -t >/dev/null 2>&1
}

# Function to wait for a service
wait_for_service() {
    local url=$1
    local name=$2
    local max_attempts=30
    local attempt=0

    echo -n "Waiting for $name"
    while [ $attempt -lt $max_attempts ]; do
        if curl -s "$url" >/dev/null 2>&1; then
            echo -e " ${GREEN}โ${NC}"
            return 0
        fi
        echo -n "."
        sleep 2
        attempt=$((attempt + 1))
    done

    echo -e " ${RED}โ${NC}"
    return 1
}

echo "๐ Checking prerequisites..."

# Check Node.js
if ! command_exists node; then
    echo -e "${RED}โ Node.js not found${NC}"
    exit 1
fi
echo -e "${GREEN}โ${NC} Node.js $(node --version)"

# Check npm
if ! command_exists npm; then
    echo -e "${RED}โ npm not found${NC}"
    exit 1
fi
echo -e "${GREEN}โ${NC} npm $(npm --version)"

# Check Cargo
if ! command_exists cargo; then
    echo -e "${RED}โ Cargo not found (required for Substrate)${NC}"
    exit 1
fi
echo -e "${GREEN}โ${NC} Cargo $(cargo --version | cut -d' ' -f2)"

echo ""
echo "๐งน Cleaning up existing processes..."

# Kill existing processes on our ports
for port in 8545 9944 9945 3000 3001; do
    if port_in_use $port; then
        echo "  Killing process on port $port..."
        kill $(lsof -ti:$port) 2>/dev/null || true
    fi
done

sleep 2

echo ""
echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"
echo "  Step 1: Starting Ethereum Local Network (Hardhat)"
echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"

cd "$PROJECT_ROOT/contracts/ethereum"

# Install dependencies if needed
if [ ! -d "node_modules" ]; then
    echo "Installing Ethereum contract dependencies..."
    npm install
fi

# Start Hardhat node in background
echo "Starting Hardhat node on port 8545..."
npx hardhat node > "$SCRIPT_DIR/logs/hardhat.log" 2>&1 &
HARDHAT_PID=$!
echo "  PID: $HARDHAT_PID"

# Wait for Hardhat to be ready
sleep 5
if ! port_in_use 8545; then
    echo -e "${RED}โ Hardhat node failed to start${NC}"
    exit 1
fi
echo -e "${GREEN}โ${NC} Hardhat node running"

echo ""
echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"
echo "  Step 2: Deploying Ethereum Contracts"
echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"

sleep 2
echo "Deploying contracts..."
npx hardhat run scripts/deploy.js --network localhost | tee "$SCRIPT_DIR/logs/deploy.log"

# Extract contract addresses from deployment log
EDSC_ADDRESS=$(grep "EDSC deployed to:" "$SCRIPT_DIR/logs/deploy.log" | awk '{print $NF}')
ATTESTER_REGISTRY_ADDRESS=$(grep "AttesterRegistry deployed to:" "$SCRIPT_DIR/logs/deploy.log" | awk '{print $NF}')
MESSAGE_TRANSMITTER_ADDRESS=$(grep "EDSCMessageTransmitter deployed to:" "$SCRIPT_DIR/logs/deploy.log" | awk '{print $NF}')
TOKEN_MESSENGER_ADDRESS=$(grep "EDSCTokenMessenger deployed to:" "$SCRIPT_DIR/logs/deploy.log" | awk '{print $NF}')

echo ""
echo "Contract Addresses:"
echo "  EDSC: $EDSC_ADDRESS"
echo "  AttesterRegistry: $ATTESTER_REGISTRY_ADDRESS"
echo "  MessageTransmitter: $MESSAGE_TRANSMITTER_ADDRESS"
echo "  TokenMessenger: $TOKEN_MESSENGER_ADDRESS"

# Update .env file
cd "$SCRIPT_DIR"
cat > .env <<EOF
# Auto-generated by setup-local-testnet.sh

# Chain connections
ETHEREUM_RPC_URL=http://localhost:8545
SUBSTRATE_WS_URL=ws://localhost:9944
ATTESTATION_SERVICE_URL=http://localhost:3000

# Test account
TEST_PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

# Contract addresses
EDSC_ADDRESS=$EDSC_ADDRESS
ATTESTER_REGISTRY_ADDRESS=$ATTESTER_REGISTRY_ADDRESS
MESSAGE_TRANSMITTER_ADDRESS=$MESSAGE_TRANSMITTER_ADDRESS
TOKEN_MESSENGER_ADDRESS=$TOKEN_MESSENGER_ADDRESS

# Test configuration
TEST_TIMEOUT=240000
DEBUG=false
EOF

echo -e "${GREEN}โ${NC} .env file updated"

echo ""
echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"
echo "  Step 3: Starting Substrate Node (EDSC-PBC)"
echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"

cd "$PROJECT_ROOT"

# Build node if needed
if [ ! -f "target/release/edsc-pbc-node" ]; then
    echo "Building EDSC-PBC node (this may take a while)..."
    cargo build --release -p edsc-pbc-node
fi

# Start node
echo "Starting EDSC-PBC node..."
./target/release/edsc-pbc-node \
    --dev \
    --tmp \
    --rpc-port 9944 \
    --rpc-cors all \
    > "$SCRIPT_DIR/logs/substrate.log" 2>&1 &
SUBSTRATE_PID=$!
echo "  PID: $SUBSTRATE_PID"

# Wait for Substrate to be ready
echo "Waiting for Substrate node..."
sleep 10
if ! port_in_use 9944; then
    echo -e "${RED}โ Substrate node failed to start${NC}"
    exit 1
fi
echo -e "${GREEN}โ${NC} Substrate node running"

echo ""
echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"
echo "  Step 4: Starting Attestation Service"
echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"

cd "$PROJECT_ROOT/services/attestation-service"

# Install dependencies if needed
if [ ! -d "node_modules" ]; then
    echo "Installing attestation service dependencies..."
    npm install
fi

# Create .env for attestation service
cat > .env <<EOF
# Attestation Service Configuration

SUBSTRATE_WS_URL=ws://localhost:9944
ETHEREUM_RPC_URL=http://localhost:8545

ATTESTER_ID=0
ATTESTER_ADDRESS=0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
ATTESTER_PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

MIN_SIGNATURES=1
TOTAL_ATTESTERS=1

CONFIRMATIONS_REQUIRED=1

TOKEN_MESSENGER_ADDRESS=$TOKEN_MESSENGER_ADDRESS

PORT=3000
LOG_LEVEL=info
EOF

# Build if needed
if [ ! -d "dist" ]; then
    echo "Building attestation service..."
    npm run build
fi

# Start service
echo "Starting attestation service..."
npm start > "$SCRIPT_DIR/logs/attestation.log" 2>&1 &
ATTESTATION_PID=$!
echo "  PID: $ATTESTATION_PID"

# Wait for service
wait_for_service "http://localhost:3000/health" "Attestation Service"

echo ""
echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"
echo "  Step 5: Starting Relayer Service"
echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"

cd "$PROJECT_ROOT/services/relayer-service"

# Install dependencies if needed
if [ ! -d "node_modules" ]; then
    echo "Installing relayer service dependencies..."
    npm install
fi

# Create .env for relayer service
cat > .env <<EOF
# Relayer Service Configuration

ATTESTATION_SERVICE_URLS=http://localhost:3000

SUBSTRATE_WS_URL=ws://localhost:9944
ETHEREUM_RPC_URL=http://localhost:8545

RELAYER_ADDRESS=0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
RELAYER_PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

MESSAGE_TRANSMITTER_ADDRESS=$MESSAGE_TRANSMITTER_ADDRESS
TOKEN_MESSENGER_ADDRESS=$TOKEN_MESSENGER_ADDRESS

POLL_INTERVAL_MS=10000
MAX_RETRIES=3
RETRY_DELAY_MS=30000

GAS_LIMIT=500000

ENABLE_API=false
LOG_LEVEL=info
EOF

# Build if needed
if [ ! -d "dist" ]; then
    echo "Building relayer service..."
    npm run build
fi

# Start service
echo "Starting relayer service..."
npm start > "$SCRIPT_DIR/logs/relayer.log" 2>&1 &
RELAYER_PID=$!
echo "  PID: $RELAYER_PID"

sleep 5
echo -e "${GREEN}โ${NC} Relayer service started"

echo ""
echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"
echo "โ                    โ SETUP COMPLETE                      โ"
echo "โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ"
echo ""
echo "๐ Services Running:"
echo "  โข Hardhat (Ethereum):      http://localhost:8545"
echo "  โข Substrate (EDSC-PBC):    ws://localhost:9944"
echo "  โข Attestation Service:     http://localhost:3000"
echo "  โข Relayer Service:         Running"
echo ""
echo "๐ Logs:"
echo "  โข Hardhat:     $SCRIPT_DIR/logs/hardhat.log"
echo "  โข Substrate:   $SCRIPT_DIR/logs/substrate.log"
echo "  โข Attestation: $SCRIPT_DIR/logs/attestation.log"
echo "  โข Relayer:     $SCRIPT_DIR/logs/relayer.log"
echo ""
echo "๐ Process IDs (for manual cleanup):"
echo "  โข Hardhat:     $HARDHAT_PID"
echo "  โข Substrate:   $SUBSTRATE_PID"
echo "  โข Attestation: $ATTESTATION_PID"
echo "  โข Relayer:     $RELAYER_PID"
echo ""
echo "๐งช Run tests with:"
echo "  cd $SCRIPT_DIR && npm test"
echo ""
echo "๐ Stop services with:"
echo "  kill $HARDHAT_PID $SUBSTRATE_PID $ATTESTATION_PID $RELAYER_PID"
echo ""
echo "Or use: ./teardown-testnet.sh"
echo ""
