version: "3.9"

# Ëtrid AI Devs - Docker Compose Stack
# Complete autonomous AI governance & development automation

services:
  # ═══════════════════════════════════════════════════════════════
  # 1. Ëtrid Blockchain Node (Substrate/Polkadot SDK)
  # ═══════════════════════════════════════════════════════════════
  etrid-node:
    image: paritytech/substrate:latest
    container_name: etrid-node
    command: >
      --chain=flare
      --dev
      --ws-external
      --rpc-external
      --rpc-cors=all
      --unsafe-rpc-external
      --unsafe-ws-external
      --rpc-methods=Unsafe
      --pruning=archive
    ports:
      - "9944:9944"   # WebSocket RPC
      - "9933:9933"   # HTTP RPC
      - "30333:30333" # P2P libp2p
    volumes:
      - ./data/etrid-node:/data
      - ./target/release/etrid:/usr/local/bin/etrid:ro
    environment:
      - RUST_LOG=info
    networks:
      - etrid-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9933/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ═══════════════════════════════════════════════════════════════
  # 2. AI Devs Orchestrator (MCP + Claude/GPT)
  # ═══════════════════════════════════════════════════════════════
  ai-devs:
    build:
      context: ./ai-devs
      dockerfile: Dockerfile
    container_name: ai-devs
    volumes:
      - ./skills:/skills:ro                    # Skill library (read-only)
      - ./config:/config:ro                    # MCP config
      - ./dids:/dids:ro                        # DID documents
      - ./data/ai-devs:/data                   # Persistent state
      - ./data/ai-devs/logs:/logs              # Audit logs
      - /var/run/docker.sock:/var/run/docker.sock  # Docker access for skill execution
    environment:
      # LLM Backend Configuration
      - MCP_CONFIG=/config/mcp_config.yaml
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_BACKEND=${LLM_BACKEND:-claude}      # claude | gpt | local

      # Blockchain Connection
      - ETRID_WS_ENDPOINT=ws://etrid-node:9944
      - ETRID_RPC_ENDPOINT=http://etrid-node:9933

      # Vector DB Connection
      - VECTORDB_ENDPOINT=http://vectordb:6333
      - VECTORDB_COLLECTION=etrid-memory

      # Notion Integration
      - NOTION_API_KEY=${NOTION_API_KEY}
      - NOTION_DATABASE_ID=${NOTION_DATABASE_ID}

      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RUST_LOG=info
    depends_on:
      - etrid-node
      - vectordb
      - notion-sync
    ports:
      - "4000:4000"   # Main MCP API
      - "4001:4001"   # Compiler AI endpoint
      - "4002:4002"   # Governance AI endpoint
      - "4003:4003"   # Runtime AI endpoint
      - "4004:4004"   # Economics AI endpoint
      - "4005:4005"   # Security AI endpoint
      - "4006:4006"   # Oracle AI endpoint
    networks:
      - etrid-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ═══════════════════════════════════════════════════════════════
  # 3. Vector Database (Qdrant) - Persistent AI Memory
  # ═══════════════════════════════════════════════════════════════
  vectordb:
    image: qdrant/qdrant:latest
    container_name: vectordb
    volumes:
      - ./data/vectordb:/qdrant/storage
    ports:
      - "6333:6333"   # HTTP API
      - "6334:6334"   # gRPC API
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - etrid-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ═══════════════════════════════════════════════════════════════
  # 4. Notion Sync - Governance Documentation Mirror
  # ═══════════════════════════════════════════════════════════════
  notion-sync:
    build:
      context: ./notion-sync
      dockerfile: Dockerfile
    container_name: notion-sync
    volumes:
      - ./data/notion:/data
      - ./config/GLOBAL_MEMORY.md:/memory/GLOBAL_MEMORY.md
    environment:
      - NOTION_API_KEY=${NOTION_API_KEY}
      - NOTION_DATABASE_ID=${NOTION_DATABASE_ID}
      - SYNC_INTERVAL=300  # 5 minutes
      - OUTPUT_PATH=/data
    networks:
      - etrid-network
    restart: unless-stopped

  # ═══════════════════════════════════════════════════════════════
  # 5. Grafana - Monitoring Dashboard
  # ═══════════════════════════════════════════════════════════════
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - etrid-network
    restart: unless-stopped

  # ═══════════════════════════════════════════════════════════════
  # 6. Prometheus - Metrics Collection
  # ═══════════════════════════════════════════════════════════════
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - etrid-network
    restart: unless-stopped

  # ═══════════════════════════════════════════════════════════════
  # 7. Local LLM (Optional) - Ollama for Offline Operation
  # ═══════════════════════════════════════════════════════════════
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    volumes:
      - ./data/ollama:/root/.ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_MODELS=llama2,codellama
    networks:
      - etrid-network
    restart: unless-stopped
    profiles:
      - local-llm  # Only starts with: docker compose --profile local-llm up

# ═══════════════════════════════════════════════════════════════
# Networks
# ═══════════════════════════════════════════════════════════════
networks:
  etrid-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ═══════════════════════════════════════════════════════════════
# Volumes (Named)
# ═══════════════════════════════════════════════════════════════
volumes:
  etrid-node-data:
  vectordb-data:
  grafana-data:
  prometheus-data:
  ollama-data:
