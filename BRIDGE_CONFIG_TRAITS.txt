===========================================
ðŸ“‹ Extracting All Bridge Config Traits
===========================================

========== pallet_bitcoin_bridge (bitcoin-bridge) ==========
    pub trait Config: frame_system::Config {
        type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
        type Currency: Currency<Self::AccountId>;
        
        /// Minimum BTC confirmations required
        #[pallet::constant]
        type MinConfirmations: Get<u32>;
        
        /// Minimum deposit amount (in satoshis)
        #[pallet::constant]
        type MinDepositAmount: Get<u64>;
        
        /// Maximum deposit amount (in satoshis)
        #[pallet::constant]
        type MaxDepositAmount: Get<u64>;
        
        /// Bridge authority account (multisig)
        type BridgeAuthority: Get<Self::AccountId>;
    }

========== pallet_ethereum_bridge (ethereum-bridge) ==========
	pub trait Config: frame_system::Config {
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		type Currency: Currency<Self::AccountId>;

		/// Minimum confirmations required (12 for Ethereum)
		#[pallet::constant]
		type MinConfirmations: Get<u32>;

		/// Bridge fee percentage (e.g., 0.1% = 10)
		#[pallet::constant]
		type BridgeFeeRate: Get<u32>;

		/// Maximum gas limit for withdrawals
		#[pallet::constant]
		type MaxGasLimit: Get<u64>;

		/// Maximum number of confirmed deposits per account
		#[pallet::constant]
		type MaxDepositsPerAccount: Get<u32>;

		/// Maximum number of pending withdrawals per account
		#[pallet::constant]
		type MaxWithdrawalsPerAccount: Get<u32>;
	}

========== pallet_doge_bridge (doge-bridge) ==========
    pub trait Config: frame_system::Config {
        type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
        type Currency: Currency<Self::AccountId> + ReservableCurrency<Self::AccountId>;
        
        /// Bridge fee percentage (e.g., 1%)
        #[pallet::constant]
        type BridgeFee: Get<Perbill>;
        
        /// Minimum bridge amount (in Koinus)
        #[pallet::constant]
        type MinBridgeAmount: Get<BalanceOf<Self>>;
        
        /// Maximum bridge amount per transaction
        #[pallet::constant]
        type MaxBridgeAmount: Get<BalanceOf<Self>>;
        
        /// Bridge pallet account ID
        #[pallet::constant]
        type PalletId: Get<PalletId>;
        
        /// Number of Dogecoin confirmations required (typically 6)
        #[pallet::constant]
        type DogeConfirmations: Get<u32>;
        
        /// Dogecoin to Ã‹trid conversion rate multiplier
        #[pallet::constant]
        type DogeConversionRate: Get<u64>;
    }

========== pallet_stellar_bridge (stellar-bridge) ==========
    pub trait Config: frame_system::Config {
        type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
        type Currency: Currency<Self::AccountId>;

        /// Minimum confirmations required (SCP finality, typically 3 ledgers = 15 seconds)
        type MinConfirmations: Get<u32>;

        /// Bridge fee percentage (e.g., 0.1% = 10)
        type BridgeFeeRate: Get<u32>;

        /// Maximum number of deposits per account
        #[pallet::constant]
        type MaxDepositsPerAccount: Get<u32>;

        /// Maximum number of withdrawals per account
        #[pallet::constant]
        type MaxWithdrawalsPerAccount: Get<u32>;
    }

========== pallet_xrp_bridge (xrp-bridge) ==========
	pub trait Config: frame_system::Config {
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		type Currency: Currency<Self::AccountId>;

		/// Minimum confirmations required (1 for XRPL - instant finality!)
		#[pallet::constant]
		type MinConfirmations: Get<u32>;

		/// Bridge fee percentage (e.g., 0.1% = 10)
		#[pallet::constant]
		type BridgeFeeRate: Get<u32>;

		/// Maximum fee in drops (1 XRP = 1,000,000 drops)
		#[pallet::constant]
		type MaxFeeDrops: Get<u64>;

		/// Maximum number of confirmed deposits per account
		#[pallet::constant]
		type MaxDepositsPerAccount: Get<u32>;

		/// Maximum number of pending withdrawals per account
		#[pallet::constant]
		type MaxWithdrawalsPerAccount: Get<u32>;
	}

========== pallet_bnb_bridge (bnb-bridge) ==========
	pub trait Config: frame_system::Config {
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		type Currency: Currency<Self::AccountId>;

		/// Minimum confirmations required (15 for BNB Chain - 3 second blocks)
		#[pallet::constant]
		type MinConfirmations: Get<u32>;

		/// Bridge fee percentage (e.g., 0.1% = 10)
		#[pallet::constant]
		type BridgeFeeRate: Get<u32>;

		/// Maximum gas limit for withdrawals
		#[pallet::constant]
		type MaxGasLimit: Get<u64>;

		/// Maximum gas price (in wei)
		#[pallet::constant]
		type MaxGasPrice: Get<u128>;

		/// Maximum number of confirmed deposits per account
		#[pallet::constant]
		type MaxDepositsPerAccount: Get<u32>;

		/// Maximum number of pending withdrawals per account
		#[pallet::constant]
		type MaxWithdrawalsPerAccount: Get<u32>;
	}

========== pallet_trx_bridge (tron-bridge) ==========
    pub trait Config: frame_system::Config {
        type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
        type Currency: Currency<Self::AccountId>;

        /// Minimum confirmations required (19 for TRON - super representatives)
        #[pallet::constant]
        type MinConfirmations: Get<u32>;

        /// Bridge fee percentage (e.g., 0.1% = 10)
        #[pallet::constant]
        type BridgeFeeRate: Get<u32>;

        /// Maximum energy limit for withdrawals
        #[pallet::constant]
        type MaxEnergyLimit: Get<u64>;

        /// Maximum bandwidth points
        #[pallet::constant]
        type MaxBandwidth: Get<u64>;

        /// Maximum number of confirmed deposits per account
        #[pallet::constant]
        type MaxDepositsPerAccount: Get<u32>;

        /// Maximum number of pending withdrawals per account
        #[pallet::constant]
        type MaxWithdrawalsPerAccount: Get<u32>;
    }

========== pallet_cardano_bridge (cardano-bridge) ==========
    pub trait Config: frame_system::Config {
        type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
        type Currency: Currency<Self::AccountId>;

        /// Minimum ADA confirmations required (Cardano finality ~15 epochs)
        #[pallet::constant]
        type MinConfirmations: Get<u32>;

        /// Minimum deposit amount (in lovelaces: 1 ADA = 1,000,000 lovelaces)
        #[pallet::constant]
        type MinDepositAmount: Get<u64>;

        /// Maximum deposit amount (in lovelaces)
        #[pallet::constant]
        type MaxDepositAmount: Get<u64>;

        /// Bridge authority account (multisig)
        type BridgeAuthority: Get<Self::AccountId>;
    }

========== pallet_chainlink_bridge (chainlink-bridge) ==========
    pub trait Config: frame_system::Config {
        type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
        type Currency: Currency<Self::AccountId>;

        /// Minimum confirmations required (12 for Ethereum)
        #[pallet::constant]
        type MinConfirmations: Get<u32>;

        /// Bridge fee rate (e.g., 0.1% = 10)
        #[pallet::constant]
        type BridgeFeeRate: Get<u32>;

        /// Maximum number of oracle nodes
        #[pallet::constant]
        type MaxOracleNodes: Get<u32>;

        /// Maximum number of data feeds
        #[pallet::constant]
        type MaxDataFeeds: Get<u32>;

        /// Maximum number of VRF requests
        #[pallet::constant]
        type MaxVRFRequests: Get<u32>;

        /// Oracle price staleness threshold (in blocks)
        #[pallet::constant]
        type PriceStalenessThreshold: Get<u32>;
    }

========== pallet_polygon_bridge (polygon-bridge) ==========
    pub trait Config: frame_system::Config {
        /// The overarching event type
        type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;

        /// Currency type for balance operations
        type Currency: Currency<Self::AccountId> + ReservableCurrency<Self::AccountId>;

        /// Minimum number of Polygon block confirmations required (default: 128)
        #[pallet::constant]
        type MinConfirmations: Get<u32>;

        /// Bridge fee rate in basis points (e.g., 10 = 0.1%)
        #[pallet::constant]
        type BridgeFeeRate: Get<u32>;

        /// Maximum gas limit for Polygon transactions
        #[pallet::constant]
        type MaxGasLimit: Get<u64>;

        /// Minimum bridge amount (prevents dust attacks)
        #[pallet::constant]
        type MinBridgeAmount: Get<BalanceOf<Self>>;

        /// Maximum number of deposits per account
        #[pallet::constant]
        type MaxDepositsPerAccount: Get<u32>;

        /// Maximum number of withdrawals per account
        #[pallet::constant]
        type MaxWithdrawalsPerAccount: Get<u32>;

        /// Pallet ID for generating the bridge account
        #[pallet::constant]
        type PalletId: Get<PalletId>;
    }

========== pallet_stablecoin_usdt_bridge (stablecoin-usdt-bridge) ==========
	pub trait Config: frame_system::Config {
		type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
		type Currency: Currency<Self::AccountId>;

		/// Bridge fee percentage (e.g., 0.05% = 5 for stablecoins)
		#[pallet::constant]
		type BridgeFeeRate: Get<u32>;

		/// Maximum number of confirmed deposits per account
		#[pallet::constant]
		type MaxDepositsPerAccount: Get<u32>;

		/// Maximum number of pending withdrawals per account
		#[pallet::constant]
		type MaxWithdrawalsPerAccount: Get<u32>;
	}

========== pallet_sol_bridge (solana-bridge) ==========
    pub trait Config: frame_system::Config {
        type RuntimeEvent: From<Event<Self>> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
        type Currency: Currency<Self::AccountId>;

        /// Minimum confirmations required (31 for Solana - finalized state)
        type MinConfirmations: Get<u32>;

        /// Bridge fee percentage (e.g., 0.1% = 10)
        type BridgeFeeRate: Get<u32>;

        /// Maximum priority fee (in lamports)
        type MaxPriorityFee: Get<u64>;

        /// Maximum compute units
        type MaxComputeUnits: Get<u32>;

        /// Maximum number of deposits per account
        #[pallet::constant]
        type MaxDepositsPerAccount: Get<u32>;

        /// Maximum number of withdrawals per account
        #[pallet::constant]
        type MaxWithdrawalsPerAccount: Get<u32>;
    }

===========================================
âœ… Config trait extraction complete
===========================================
